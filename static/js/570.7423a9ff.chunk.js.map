{"version":3,"file":"static/js/570.7423a9ff.chunk.js","mappings":"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","sources":["pages/steps/StepDateInfo.tsx","pages/steps/StepGeneralnfo.tsx","pages/steps/StepsHeader.tsx","pages/steps/FormHeader.tsx","pages/steps/stepForm/stepFormInputs/StepFormEployer.tsx","pages/steps/stepForm/stepFormInputs/StepFormTopInputs.tsx","pages/steps/stepForm/stepFormInputs/StepInputsWorkplace.tsx","pages/steps/stepForm/stepFormInputs/StepInputsConstract.tsx","pages/steps/stepForm/stepFormInputs/StepInputsWorktime.tsx","pages/steps/stepForm/stepFormInputs/StepInputsDepartment.tsx","pages/steps/stepForm/stepFormInputs/StepInputsMembership.tsx","pages/steps/stepForm/StepForm.tsx","pages/steps/useMultistepForm.tsx","pages/steps/StepSummary.tsx","pages/steps/StepsButtons.tsx","pages/steps/IndexSteps.tsx"],"sourcesContent":["import Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepDateInfo = () => {\r\n  return (\r\n    <Card>\r\n      <Typography variant=\"body1\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        KONTAKT: tel.\r\n        <br /> 736-850-536 <br />\r\n        ipamazon@wp.pl <br />\r\n        www.ozzip.p\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        Facebook: <br /> OZZ Inicjatywa Pracownicza Amazon <br /> INFORMACJA O\r\n        DACIE PRZYJĘCIA DO ZWIĄZKU\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ p: 1 }}>\r\n        Jeżeli nasza Komisja nie postanowi inaczej, datą przyjęcia Ciebie do\r\n        związku będzie: <br />\r\n        1) ostatni dzień miesiąca, w którym oświadczenie to zostało doręczone:{\" \"}\r\n        <br />\r\n        a) członkowi prezydium organizacji podstawowej Związku (również poprzed\r\n        odebranie ze skrzynki pocztowej na tablicy związkowej) <br /> b)\r\n        bezpośrednio osobie działającej z upoważnienia prezydium Komisji <br />\r\n        c) na ujawniony w KRS adres Związku (aktualnie: ul. Kościelna 4/1a,\r\n        60-538 Poznań)\r\n        <br /> 2) dzień, w którym po otrzymaniu tego oświadczenia prezydium\r\n        Komisji podjęło się Twojej obrony wobec podmiotu zatrudniającego (w tym\r\n        pracodawcy). <br />\r\n        Powyższe wynika z Uchwały nr 60/5/2018 Komisji Krajowej OZZIP z\r\n        28.10.2018 r\r\n      </Typography>\r\n\r\n      <Typography variant=\"body2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        JEŚLI PODAŁAŚ/PODAŁEŚ E-MAIL, OTRZYMASZ DROGĄ E-MAIL POTWIERDZENIE\r\n        ZAPISANIA DO ZWIĄZKU ORAZ DODANIA DO LISTY DYSKUSYJNEJ.\r\n      </Typography>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default StepDateInfo;\r\n","import Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepGeneralnfo = () => {\r\n  return (\r\n    <Card>\r\n      <Typography variant=\"body2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        KLAUZULA INFORMACYNA\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ p: 1 }}>\r\n        Przetwarzanie danych osobowych odbywać się będzie w celu:{\" \"}\r\n      </Typography>{\" \"}\r\n      <Typography variant=\"body2\" sx={{ p: 1 }}>\r\n        • wykonywania celów statutowych,{\" \"}\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ p: 0.5 }}>\r\n        {\" \"}\r\n        • realizowania wymagań wynikających z przepisów prawa, w szczególności\r\n        zaś w Ustawie z dnia 23 maja 1991 r. o związkach zawodowych{\" \"}\r\n      </Typography>{\" \"}\r\n      • dołączenia członka/członkini do listy mailingowej lub innego\r\n      elektronicznego komunikatora umożli- wiającego wysyłanie lub odbiór\r\n      informacji między członkami OZZIP, używanego w celach związanych ze\r\n      statutową działalnością OZZIP. <br />\r\n      Uprawnionymi do zbierania i przetwarzania danych osobowych w wyżej\r\n      wskazanym celu są członkow- ie Komisji Krajowej OZZIP, członkowie\r\n      prezydiów podstawowych jednostek organizacyjnych związ- ku albo\r\n      przedstawiciele związku działający z up- oważnienia wyżej wskazanych\r\n      organów. <br /> OZZIP nie przekazuje pracodawcom lub innym podmiotom\r\n      zatrudniającym zbiorczych list swoich członków. Jeżeli jednak pracodawca\r\n      lub inny podmi- ot zatrudniający wystąpi z prośbą o przedstawienie\r\n      informacji czy zamierzamy Ciebie reprezentować (np. w związku z zamiarem\r\n      wypowiedzenia umowy) podejmiemy się Twojej obrony i niezwłocznie Cię o tym\r\n      poinformujemy, korzystając z podanych przez Ciebie w tej deklaracji danych\r\n      kontaktowych.\r\n      <br /> Okres przetwarzania danych osobowych rozpocznie się od chwili\r\n      doręczenia przedstawicielowi OZZIP niniejszego podpisanego oświadczenia i\r\n      będzie tr- wał przez okres niezbędny do realizacji celów stat- utowych\r\n      OZZIP. <br />\r\n      Zgoda na przetwarzanie danych osobowych ob- jętych deklaracją\r\n      przystąpienia do związku zawodowego OZZIP w zakresie imienia i nazwis- ka,\r\n      podmiotu zatrudniającego, podstawy zatrudnie- nia, długości zatrudnienia w\r\n      odniesieniu do osoby wykonującej pracę zarobkową niebędącej pracown- ikiem\r\n      w rozumieniu KP, oraz wymiaru czasu pracy (w odniesieniu do wszystkich\r\n      wykonujących pracę zarobkową) jest warunkiem niezbędnym członkost- wa w\r\n      OZZIP. Wycofanie zgody na ich przetwarza- nie jest równoznaczne z\r\n      wystąpieniem ze związku, niemniej nie powoduje ono zaprzestania przet-\r\n      warzania tych danych w zakresie niezbędnym dla realizowania wymagań\r\n      wynikających z przepisów prawa lub ochrony słusznych interesów adminis-\r\n      tratora danych. <br />\r\n      W razie pytań prosimy o kontakt z Inspektorem Ochrony Danych Osobowych w\r\n      OZZIP: Jarosław Urbański (tel: 663-633-504, email: rzecznikochrony-\r\n      danychosobowych@ozzip.pl). <br /> OZZIP będzie przetwarzać dane osobowe na\r\n      pod- stawie rozporządzenia Parlamentu Europejskie- go i Rady (UE) 2016/679\r\n      z dnia 27 kwietnia 2016 r. w sprawie ochrony osób fizycznych w związku z\r\n      przetwarzaniem danych osobowych i w sprawie swobodnego przepływu takich\r\n      danych oraz uchyl- enia dyrektywy 95/46/WE. <br />\r\n      Każdej osobie, której dane osobowe są przetwarzane przez OZZIP przysługuje\r\n      prawo do ich: weryfikacji, kontroli, aktualizacji, korekty, uzyskania\r\n      informacji na temat metody, w jaki sposób są przechowywane, funkcji, a\r\n      także odwołania od dalszego ich przet- warzania. W celu realizacji tych\r\n      uprawnień prosimy o kontakt na ipamazon@wp.pl, tel. 736-850-536.\r\n      <br /> W momencie, gdy którakolwiek z podanych infor- macji zmieni się,\r\n      prosimy o kontakt w celu uaktu- alnienia ewidencji. Dane osobowe będą\r\n      pozyski- wane wyłącznie na podstawie niniejszej deklaracji oraz oświadczeń\r\n      mających na celu zmianę lub ko- rektę tych danych. Przekazanie danych\r\n      osobowych w inny sposób będzie wymagało odrębnej zgody na ich\r\n      przetwarzanie.\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default StepGeneralnfo;\r\n","import React from 'react';\r\n\r\n\r\ninterface Props {\r\n  steps: JSX.Element[];\r\n  currentStepIdx: number;\r\n}\r\n\r\nconst StepsHeader = (props:Props) => {\r\n    return (\r\n      <header className=\"wrapper wrapper--formReactionHeader \">\r\n        <h3 className=\"formReaction__stepIdx \">\r\n          Krok {props.currentStepIdx + 1}/{props.steps.length}\r\n        </h3>\r\n      </header>\r\n    );\r\n};\r\n\r\nexport default StepsHeader;","import Typography from \"@mui/material/Typography\";\r\n\r\nconst FormHeader = () => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"body1\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        Deklaracja przystąpienia do <br /> Ogólnopolskiego <br /> Związku\r\n        Zawodowego „Inicjatywa Pracownicza”\r\n      </Typography>\r\n\r\n      <Typography variant=\"body2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        DEKLARACJA <br />\r\n        Ja, niżej podpisany/podpisana oświadczam, iż przystępuję do\r\n        Ogólnopolskiego Związku Zawodowego „Inicjatywa Pracownicza” z siedzibą w\r\n        Poznaniu (KRS nr 0000215247).\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeader;\r\n","import { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepFormEployer = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  const handleEmployerChange = async (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    formik.handleChange(event);\r\n    if (event.target.value !== \"\") {\r\n      formik.setErrors({ employer: \"\", employerOther: \"\" });\r\n      await formik.validateForm();\r\n      formik.setFieldValue(\"employerOther\", \"\");\r\n      \r\n    }\r\n  };\r\n\r\n  const handleLoginChange = async (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    formik.handleChange(event);\r\n    if (event.target.value !== \"\") {\r\n      formik.setErrors({ employer: \"\", employerOther: \"\" });\r\n      await formik.validateForm();\r\n      formik.setFieldValue(\"employer\", \"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl>\r\n      <FormLabel id=\"demo-row-radio-buttons-group-label\">Pracodawca:</FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n        name=\"employer\"\r\n        value={formik.values.employer}\r\n        onChange={handleEmployerChange}\r\n        onBlur={formik.handleBlur}\r\n      >\r\n        {[\"Amazon\", \"Adecco\", \"Randstad\"].map(employer => {\r\n          return (\r\n            <FormControlLabel\r\n              key={employer}\r\n              value={employer}\r\n              control={<Radio />}\r\n              label={employer}\r\n            />\r\n          );\r\n        })}\r\n      </RadioGroup>\r\n      <TextField\r\n        type={\"text\"}\r\n        name={\"employerOther\"}\r\n        label={\"Inny\"}\r\n        value={formik.values.employerOther}\r\n        onChange={handleLoginChange}\r\n        onBlur={formik.handleBlur}\r\n        size=\"small\"\r\n      />\r\n\r\n      <Typography variant=\"body1\">\r\n        {(formik.touched.employer || formik.touched.employerOther) &&\r\n          formik.errors.employer && (\r\n            <span style={{ color: \"red\" }}>{formik.errors.employer}</span>\r\n          )}\r\n      </Typography>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default StepFormEployer;\r\n","import FormGroup from \"@mui/material/FormGroup\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\n\r\nconst StepFormTopInputs = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  const dataTextInputs = [\r\n    { label: \"Imię\", value: \"name\", type: \"text\" },\r\n    { label: \"Nazwisko\", value: \"surname\", type: \"text\" },\r\n    { label: \"Aders\", value: \"adress\", type: \"text\" },\r\n    { label: \"Telefon\", value: \"phone\", type: \"number\" },\r\n    { label: \"E-mail\", value: \"email\", type: \"email\" },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {dataTextInputs.map(({ label, value, type }) => {\r\n        return (\r\n          <FormGroup key={label}>\r\n            <TextField\r\n              key={label}\r\n              type={type}\r\n              id={value}\r\n              name={value}\r\n              label={label}\r\n              value={formik.values[value as keyof typeof formik.values]}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"small\"\r\n            />\r\n            <Typography variant=\"body1\">\r\n              {formik.touched[value as keyof typeof formik.touched] &&\r\n                formik.errors[value as keyof typeof formik.errors] && (\r\n                  <span style={{ color: \"red\" }}>\r\n                    {formik.errors[value as keyof typeof formik.errors]}\r\n                  </span>\r\n                )}\r\n            </Typography>\r\n          </FormGroup>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StepFormTopInputs;\r\n","import { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepInputsWorkplace = () => {\r\n  const { formik } = useContext(StepsContext);\r\n  const handleEmployerChange = async (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    formik.handleChange(event);\r\n    if (event.target.value !== \"\") {\r\n      formik.setErrors({ workplace: \"\", workplaceOther: \"\" });\r\n      await formik.validateForm();\r\n      formik.setFieldValue(\"workplaceOther\", \"\");\r\n    }\r\n  };\r\n\r\n  const handleEmployerOtherChange = async (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    formik.handleChange(event);\r\n    if (event.target.value !== \"\") {\r\n      formik.setErrors({ workplace: \"\", workplaceOther: \"\" });\r\n      await formik.validateForm();\r\n      formik.setFieldValue(\"workplace\", \"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl>\r\n      <FormLabel id=\"demo-row-radio-buttons-group-label\">\r\n        Miejsce Pracy:\r\n      </FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n        name=\"workplace\"\r\n        value={formik.values.workplace}\r\n        onChange={handleEmployerChange}\r\n        onBlur={formik.handleBlur}\r\n      >\r\n        {[\"poz1\", \"wro1\", \"wro2\", \"wro5\", \"lcj\", \"ktw1\", \"ktw3\", \"szzl\"].map(\r\n          workplace => {\r\n            return (\r\n              <FormControlLabel\r\n                key={workplace}\r\n                value={workplace}\r\n                control={<Radio />}\r\n                label={workplace}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n      </RadioGroup>\r\n      <TextField\r\n        type={\"text\"}\r\n        name={\"workplaceOther\"}\r\n        label={\"Inne\"}\r\n        value={formik.values.workplaceOther}\r\n        onChange={handleEmployerOtherChange}\r\n        onBlur={formik.handleBlur}\r\n        size=\"small\"\r\n      />\r\n\r\n      <Typography variant=\"body1\">\r\n        {(formik.touched.workplace || formik.touched.workplaceOther) &&\r\n          formik.errors.workplace && (\r\n            <span style={{ color: \"red\" }}>{formik.errors.workplace}</span>\r\n          )}\r\n      </Typography>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default StepInputsWorkplace;\r\n","import { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepInputsConstract = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  return (\r\n    <FormControl>\r\n      <FormLabel id=\"demo-row-radio-buttons-group-label\">Umowa:</FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n        name=\"contract\"\r\n        value={formik.values.contract}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n      >\r\n        {[\r\n          \"Na czas nieokreślony\",\r\n          \"Na czas określony\",\r\n          \"Okres próbny\",\r\n          \"Umowa zlecenie\",\r\n        ].map(contract => {\r\n          return (\r\n            <FormControlLabel\r\n              key={contract}\r\n              value={contract}\r\n              control={<Radio />}\r\n              label={contract}\r\n            />\r\n          );\r\n        })}\r\n      </RadioGroup>\r\n\r\n      <Typography variant=\"body1\">\r\n        {(formik.touched.contract || formik.touched.contract) &&\r\n          formik.errors.contract && (\r\n            <span style={{ color: \"red\" }}>{formik.errors.contract}</span>\r\n          )}\r\n      </Typography>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default StepInputsConstract;\r\n","import { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepInputsWorktime = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  \r\n  return (\r\n    <FormControl>\r\n      <FormLabel id=\"demo-row-radio-buttons-group-label\">\r\n        Wymiar czasu pracy:\r\n      </FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n        name=\"worktime\"\r\n        value={formik.values.worktime}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n      >\r\n        {[\"Cały etat\", \"Pół etatu\"].map(worktime => {\r\n          return (\r\n            <FormControlLabel\r\n              key={worktime}\r\n              value={worktime}\r\n              control={<Radio />}\r\n              label={worktime}\r\n            />\r\n          );\r\n        })}\r\n      </RadioGroup>\r\n\r\n      <Typography variant=\"body1\">\r\n        {(formik.touched.worktime || formik.touched.worktime) &&\r\n          formik.errors.worktime && (\r\n            <span style={{ color: \"red\" }}>{formik.errors.worktime}</span>\r\n          )}\r\n      </Typography>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default StepInputsWorktime;\r\n","import FormGroup from \"@mui/material/FormGroup\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\n\r\nconst StepInputsDepartment = () => {\r\n  const { formik } = useContext(StepsContext);\r\n  return (\r\n    <>\r\n      {[\r\n        { label: \"Dział\", value: \"department\" },\r\n        { label: \"Login\", value: \"login\" },\r\n      ].map(({ label, value }) => {\r\n        return (\r\n          <FormGroup key={label}>\r\n            <TextField\r\n              type=\"text\"\r\n              id={value}\r\n              name={value}\r\n              label={label}\r\n              value={formik.values[value as keyof typeof formik.values]}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"small\"\r\n            />\r\n            <Typography variant=\"body1\">\r\n              {formik.touched[value as keyof typeof formik.touched] &&\r\n                formik.errors[value as keyof typeof formik.errors] && (\r\n                  <span style={{ color: \"red\" }}>\r\n                    {formik.errors[value as keyof typeof formik.errors]}\r\n                  </span>\r\n                )}\r\n            </Typography>\r\n          </FormGroup>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StepInputsDepartment;\r\n","import { useContext } from \"react\";\r\nimport { StepsContext } from \"../../../../context/ContextProv\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst StepInputsMembership = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  return (\r\n    <FormControl>\r\n      <FormLabel id=\"demo-row-radio-buttons-group-label\">\r\n        Przynależność do innych związków:\r\n      </FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n        name=\"membership\"\r\n        value={formik.values.membership}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n      >\r\n        {[\"Nie należę\", \"Należę\", \"Nie należę nie chcę\"].map(membership => {\r\n          return (\r\n            <FormControlLabel\r\n              key={membership}\r\n              value={membership}\r\n              control={<Radio />}\r\n              label={membership}\r\n            />\r\n          );\r\n        })}\r\n      </RadioGroup>\r\n\r\n      <Typography variant=\"body1\">\r\n        {(formik.touched.membership || formik.touched.membership) &&\r\n          formik.errors.membership && (\r\n            <span style={{ color: \"red\" }}>{formik.errors.membership}</span>\r\n          )}\r\n      </Typography>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default StepInputsMembership;\r\n","import FormHeader from \"../FormHeader\";\r\nimport StepFormEployer from \"./stepFormInputs/StepFormEployer\";\r\nimport StepFormTopInputs from \"./stepFormInputs/StepFormTopInputs\";\r\nimport StepInputsWorkplace from \"./stepFormInputs/StepInputsWorkplace\";\r\nimport StepInputsConstract from \"./stepFormInputs/StepInputsConstract\";\r\nimport StepInputsWorktime from \"./stepFormInputs/StepInputsWorktime\";\r\nimport StepInputsDepartment from \"./stepFormInputs/StepInputsDepartment\";\r\nimport StepInputsMembership from \"./stepFormInputs/StepInputsMembership\";\r\n\r\nconst StepForm = () => {\r\n  return (\r\n    <>\r\n      <FormHeader />\r\n      <StepFormTopInputs />\r\n      <StepFormEployer />\r\n      <StepInputsWorkplace />\r\n      <StepInputsConstract />\r\n      <StepInputsWorktime />\r\n      <StepInputsDepartment />\r\n      <StepInputsMembership />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StepForm;\r\n","import { useState } from \"react\";\r\n\r\nconst useMultistepForm = (steps: JSX.Element[]) => {\r\n  const [currentStepIdx, setCurrentStepIdx] = useState(0);\r\n\r\n  const next = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev >= steps.length - 1) return prev;\r\n      return prev + 1;\r\n    });\r\n  };\r\n\r\n  const back = () => {\r\n    setCurrentStepIdx(prev => {\r\n      if (prev <= 0) return prev;\r\n      return prev - 1;\r\n    });\r\n  };\r\n\r\n  return {\r\n    currentStepIdx,\r\n    setCurrentStepIdx,\r\n    step: steps[currentStepIdx],\r\n    steps,\r\n    isFirstStep: currentStepIdx === 0,\r\n    isLastStep: currentStepIdx === steps.length - 1,\r\n    next,\r\n    back,\r\n  };\r\n};\r\n\r\nexport default useMultistepForm;\r\n","import Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useContext } from \"react\";\r\nimport { StepsContext } from \"../../context/ContextProv\";\r\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\r\nconst StepSummary = () => {\r\n  const { formik } = useContext(StepsContext);\r\n\r\n  const formikValues = Object.values(formik.values);\r\n\r\n  const dataSummary = [\r\n    \"Imię\",\r\n    \"Nazwisko\",\r\n    \"Adres\",\r\n    \"Telefon\",\r\n    \"E-mail\",\r\n    \"Pracodawca\",\r\n    \"Pracodawca\",\r\n    \"Miejsce Pracy\",\r\n    \"Miejsce Pracy\",\r\n    \"Umowa\",\r\n    \"Wymiar czasu pracy\",\r\n    \"Dział\",\r\n    \"Login\",\r\n    \"Przynależność do innych ziwązków\",\r\n  ];\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"body1\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n        Podsumowanie\r\n      </Typography>\r\n\r\n      {dataSummary.map((text, idx) => {\r\n        return (\r\n          <>\r\n            {formikValues[idx] === \"\" ? null : (\r\n              <Typography variant=\"body1\" sx={{ p: 1 }}>\r\n                <span key={text}>\r\n                  <strong>{text}: </strong>\r\n                  {formikValues[idx]}\r\n                </span>\r\n              </Typography>\r\n            )}\r\n          </>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StepSummary;\r\n","import Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useEffect, useContext } from \"react\";\r\nimport { StepsContext } from \"../../context/ContextProv\";\r\n\r\ninterface Props {\r\n  next: () => void;\r\n  back: () => void;\r\n  currentStepIdx: number;\r\n  steps: JSX.Element[];\r\n}\r\n\r\nconst StepsButtons = (props: Props) => {\r\n  const { formik, isSubmited } = useContext(StepsContext);\r\n\r\n  const isError = Object.values(formik.errors);\r\n\r\n  useEffect(() => {\r\n    if (isSubmited && isError.length === 0) props.next();\r\n  }, [isSubmited]);\r\n\r\n  return (\r\n    <Box>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => props.back()}\r\n        sx={{ width: \"35%\", p: \"0.3em\" }}\r\n      >\r\n        Wstecz\r\n      </Button>\r\n      {props.currentStepIdx !== 2 && (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            props.next();\r\n          }}\r\n          sx={{ width: \"35%\", p: \"0.3em\" }}\r\n          type=\"button\"\r\n        >\r\n          {props.currentStepIdx < props.steps.length - 1 ? \"Dalej\" : \"Wyślij\"}\r\n        </Button>\r\n      )}\r\n\r\n      {props.currentStepIdx === 2 && (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            isSubmited && isError.length === 0 && props.next();\r\n          }}\r\n          sx={{ width: \"35%\", p: \"0.3em\" }}\r\n          type=\"submit\"\r\n        >\r\n          {isError.length === 0 ? \"Zatwierdź\" : \"Podaj dane\"}\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StepsButtons;\r\n","import Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport StepDateInfo from \"./StepDateInfo\";\r\nimport StepGeneralnfo from \"./StepGeneralnfo\";\r\nimport StepsHeader from \"./StepsHeader\";\r\nimport StepForm from \"./stepForm/StepForm\";\r\nimport useStepFormFormik from \"./stepForm/useStepFormFormik\";\r\nimport useMultistepForm from \"./useMultistepForm\";\r\nimport StepSummary from \"./StepSummary\";\r\nimport StepsButtons from \"./StepsButtons\";\r\nimport { useContext } from \"react\";\r\nimport { StepsContext } from \"../../context/ContextProv\";\r\n\r\nconst IndexSteps = () => {\r\n  const { formik, isSubmited } = useContext(StepsContext);\r\n\r\n  const {\r\n    steps,\r\n    currentStepIdx,\r\n    setCurrentStepIdx,\r\n    step,\r\n    isFirstStep,\r\n    isLastStep,\r\n    back,\r\n    next,\r\n  } = useMultistepForm([\r\n    <StepDateInfo />,\r\n    <StepGeneralnfo />,\r\n    <StepForm />,\r\n    <StepSummary />,\r\n  ]);\r\n\r\n  return (\r\n    <Container>\r\n      <StepsHeader currentStepIdx={currentStepIdx} steps={steps} />\r\n      <>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          {step}\r\n\r\n          <StepsButtons\r\n            next={next}\r\n            back={back}\r\n            currentStepIdx={currentStepIdx}\r\n            steps={steps}\r\n          />\r\n        </form>\r\n      </>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default IndexSteps;\r\n"],"names":["_jsxs","Card","children","Typography","variant","sx","p","fontWeight","_jsx","props","className","currentStepIdx","steps","length","_Fragment","formik","useContext","StepsContext","handleEmployerChange","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","handleChange","target","value","setErrors","employer","employerOther","validateForm","setFieldValue","stop","_x","apply","arguments","handleLoginChange","_ref2","_callee2","_context2","_x2","FormControl","FormLabel","id","RadioGroup","row","name","values","onChange","onBlur","handleBlur","map","FormControlLabel","control","Radio","label","TextField","type","size","touched","errors","style","color","FormGroup","workplace","workplaceOther","handleEmployerOtherChange","contract","worktime","membership","FormHeader","StepFormTopInputs","StepFormEployer","StepInputsWorkplace","StepInputsConstract","StepInputsWorktime","StepInputsDepartment","StepInputsMembership","_useState","useState","_useState2","_slicedToArray","setCurrentStepIdx","step","isFirstStep","isLastStep","back","formikValues","Object","Box","text","idx","_useContext","isSubmited","isError","useEffect","Button","onClick","width","_useMultistepForm","useMultistepForm","StepDateInfo","StepGeneralnfo","StepForm","StepSummary","Container","StepsHeader","onSubmit","handleSubmit","StepsButtons"],"sourceRoot":""}